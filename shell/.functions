#!/usr/bin/env bash

function continue_prompt {
    local yn
    # prepare a default message or take the first argument
    local message=${1:-"Do you want to continue? (y/n) "}
    while true; do
        echo $message
        read yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer y or n.";;
        esac
    done
}


function archive() {
    zip -r "$1".zip "$1" ;
}

function ips() {
    nameservers=(8.8.8.8 8.8.4.4 1.1.1.1 195.129.12.122 192.76.144.66 158.43.240.3 77.88.8.8)
    type=${2:-A}
    for i in "${nameservers[@]}";
    do
        echo "$i"
        dig @"$i" +nocmd "$1" $type +multiline +noall +answer
        echo
    done
}

function whatgit() {
    days=${1:-2}
    echo "gitlogs of the last $days days"
    cd ~/Code && git standup -s -d "$days" -D local -m 3
}

function wholisten() {
    lsof -nP -i4TCP:$1 | grep LISTEN
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# All the dig info
function digga() {
    type=${2:-A}
    dig +nocmd "$1" "$type" +multiline +noall +answer
}

function removehost() {
    ssh-keygen -R "$1"
}

function scanhost() {
    ssh-keyscan -H "$1" >> ~/.ssh/known_hosts
}

function copysshkey() {
    local host=$1
    local port=${2:-22}
    local filename=${3:-id_ed25519}
    ssh-copy-id -i "~/.ssh/$filename" $host -p $port
}


function sshkey() {
    local keysPath="$HOME/.ssh"
    local fileName="${1}"
    local curve="${4:-ed25519}"
    local name=""
    local email=""

    # if file name exists abort
    if [ -f "$keysPath/$fileName" ]; then
        echo "File $keysPath/$fileName already exists"
        return 1
    fi

    # ask for filename if not provided
    if [ -z "$fileName" ]; then
        echo "Please provide a filename for the key"
        read fileName
    fi

    # ask for email
    echo "Please provide your email address for the key"
    read email

    # ask for name
    echo "Please provide your name for the key"
    read name

    echo "Generating ssh key with $curve under $keysPath/$fileName"

    # generate a ssh key with the curve ed25519 (eliptical curve cryptography)
    # with a key derivation function (kdf) of 420 iterations
    ssh-keygen -t $curve -a 420 -C "$name <$email>" -f "$keysPath/$fileName"

    # NOT YET SUPPORTED!!
    # # ask if the key should be added to a 1Password Vault
    # echo
    # if continue_prompt "Do you want to add the key to 1Password? (y/n)"; then
    #     # ask for a item name
    #     echo
    #     echo "Please provide a name for the item"
    #     read itemName

    #     # show available vault and ask to which the key should be added
    #     echo
    #     echo "Please select a vault to add the key to"
    #     op vault list

    #     # ask for the vault
    #     echo
    #     echo "Please provide the name of the vault"
    #     read vaultName

    #     # add the key to 1Password
    #     op item create \
    #         --category ssh \
    #         --title "$itemName" \
    #         --vault "$vaultName" \
    #         --tags ssh-key \
    #         --fields "public=$(cat $keysPath/$fileName.pub)" "private=$(cat $keysPath/$fileName)"
    # fi
}


function weather() {
    city="$1"

    if [ -z "$city" ]; then
        city="Antwerp"
    fi

    eval "curl http://wttr.in/${city}"
}

# Scrape a single webpage with all assets
function scrapeUrl() {
    wget --adjust-extension --convert-links --page-requisites --span-hosts --no-host-directories "$1"
}

#  Commit everything
function commit() {
    commitMessage="$1"

    if [ "$commitMessage" = "" ]; then
        commitMessage="wip"
    fi

    git add .
    eval "git commit -a -m '${commitMessage}'"
}

# push to remote origin
function push() {
    target=${1:-origin}
    branch=$(git branch | awk '/\*/ { print $2; }')
    git push $target $branch
}

# force push current branch to remote origin
function pushforce() {
    branch=$(git branch | awk '/\*/ { print $2; }')
    git push origin +$branch
}

function phpversion() {
    version=$(php --version | head -n 1 | cut -d " " -f 2 | cut -d "." -f 1,2)
    echo $version
}

function phprestart() {
    currentVersion=$(phpversion)
    brew services restart "php@${currentVersion}"
    valet restart
}

function xdebug() {
    basePath="$(brew --prefix)/etc/php"
    currentVersion=$(phpversion)
    iniFileLocation="$basePath/${currentVersion}/conf.d/ext-xdebug.ini";
    echo "checking ini file at $iniFileLocation"
    if [ ! -f "$iniFileLocation" ]; then
        echo "creating missing config file"
        echo "zend_extension=\"xdebug.so\""  > $basePath/${currentVersion}/conf.d/ext-xdebug.ini
    fi

    currentLine=`\cat $iniFileLocation | grep xdebug.so`

    if [[ "$currentLine" =~ \#zend_extension ]];
    then
        sed -i -e 's/^#zend_extension/zend_extension/g' $iniFileLocation
        echo "xdebug is now active";
    else
        sed -i -e 's/^zend_extension/#zend_extension/g' $iniFileLocation
        echo "xdebug is now inactive";
    fi
    phprestart
}

function scheduler() {
    while :; do
        php artisan schedule:run
        echo "Sleeping 60 seconds..."
        sleep 60
    done
}

function mp() {
     php artisan make:policy "$1Policy" --model="$1"
}

function checkLinks() {
    mixed-content-scanner scan $@
}

function watchfolder() {
    folder=${1:-$(pwd)}

    echo "start watching $folder"
    fswatch --recursive --event-flags --event-flag-separator=" | " --timestamp --format-time="%Y-%m-%d %H:%M:%S %Z: " $folder
}

# Switch PHP versions
function phpv() {
    echo "stopping valet"
    valet stop

    echo "stopping all php services"
    brew services list | awk '{print $1}' | grep php | while read line
    do
        brew services stop "$line"
    done

    echo "unlinking all php version"
    brew unlink php@7.4 php@8.0 php

    echo "link $1"
    brew link --force --overwrite $1

    echo "start $1"
    brew services start $1

    echo "install composer packages"
    composer global update

    echo "installing valet"
    valet install
}

# alias php73="phpv php@7.3"
# alias php74="phpv php@7.4"
# alias php8="phpv php@8.0"
# alias php81="phpv php@8.1"

# Network scanner
function bitCountForMask {
    local -i count=0
    local mask="${1##0x}"
    local digit

    while [ "$mask" != "" ]; do
        digit="${mask:0:1}"
        mask="${mask:1}"
        case "$digit" in
            [fF]) count=count+4 ;;
            [eE]) count=count+3 ;;
            [cC]) count=count+2 ;;
            8) count=count+1 ;;
            0) ;;
            *)
                echo 1>&2 "error: illegal digit $digit in netmask"
                return 1
            ;;
        esac
    done

    echo $count
}

function scanNetwork() {
    local defaultNet="192.168.1.0/24"
    local network="${1:-$defaultNet}"
    echo "scanning network $network"
    nmap -sn $network -oG - | awk '/Up$/{print $2 " " $3}'
}

# Format byte sizes into human-readable strings
function format_size() {
    local size_kb=$1
    if [[ $size_kb -lt 1024 ]]; then
        printf "%.2f KB" $size_kb
    elif [[ $size_kb -lt 1048576 ]]; then
        printf "%.2f MB" $(bc -l <<< "$size_kb/1024")
    else
        printf "%.2f GB" $(bc -l <<< "$size_kb/1048576")
    fi
}

function removeVendors() {
    local projectsFolder="$HOME/Code/$1";
    local dryrun=0

    # Check for --dry-run argument
    for arg in "$@"; do
        case $arg in
            --dry-run)
                dryrun=1
                shift
                ;;
        esac
    done

    echo "Deleting all vendors and node_modules in $projectsFolder"

    # Initialize a variable to keep track of total size deleted in kilobytes
    total_deleted_kb=0

    # Function to add sizes
    add_sizes() {
        local current=${1:-0}
        local new=${2:-0}
        echo $(($current + $new))
    }

    # Process each directory
    while IFS= read -r dir; do
        size_kb=$(du -sk "$dir" | cut -f1)
        echo "($(format_size $size_kb)) Deleting: $dir"
        total_deleted_kb=$(add_sizes $total_deleted_kb $size_kb)
        # Delete only if not in dry run mode
        if [[ $dryrun -eq 0 ]]; then
            rm -rf "$dir"
        fi
    done < <(find "$projectsFolder" -maxdepth 3 -mindepth 3 -type d \( -name "vendor" -o -name "node_modules" \))

    # Print total size deleted
    echo "Total deleted size: $(format_size $total_deleted_kb)"
}

function opendb () {
   [ ! -f .env ] && { echo -e "\033[0;31mNo .env file found.\033[0m"; return 1; }

   DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

   DB_URL="${DB_CONNECTION}://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}"

   echo "Opening ${DB_URL}"
   open $DB_URL
}

function db {
    rootpasswd="";

    if [ "$1" = "refresh" ]; then
        MYSQL_PWD=${rootpasswd} mysql -h 127.0.0.1 -uroot -e "drop database $2; create database \`$2\` CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;"
    elif [ "$1" = "create" ]; then
        MYSQL_PWD=${rootpasswd} mysql -h 127.0.0.1 -uroot -e "create database \`$2\`"
    elif [ "$1" = "drop" ]; then
        MYSQL_PWD=${rootpasswd} mysql -h 127.0.0.1 -uroot -e "drop database \`$2\`"
    fi
}

function createDb() {
    [ ! -f .env ] && { echo -e "\033[0;31mNo .env file found.\033[0m"; return 1; }

    DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

    DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

    if [[ "$DB_CONNECTION" == "mysql" ]]; then
        echo "creating Database $DB_DATABASE in MySQL ";
        MYSQL_PWD=${DB_PASSWORD} mysql -h ${DB_HOST} -u${DB_USERNAME} -e "CREATE DATABASE \`$DB_DATABASE\` CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;";
    elif [[ "$DB_CONNECTION" == "pgsql" ]]; then
        echo "creating Database $DB_DATABASE in Postgres ";
        PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USERNAME} -c "CREATE DATABASE $DB_DATABASE;"
    fi
}

function dropDb() {
    [ ! -f .env ] && { echo "\033[0;31mNo .env file found.\033[0m"; return 1; }

    DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

    DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

    if [[ "$DB_CONNECTION" == "mysql" ]]; then
        MYSQL_PWD=${DB_PASSWORD} mysql -h ${DB_HOST} -u${DB_USERNAME} -e "DROP DATABASE IF EXISTS \`$DB_DATABASE\`;";
    elif [[ "$DB_CONNECTION" == "pgsql" ]]; then
        PGPASSWORD=${DB_PASSWORD} psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USERNAME} -c "DROP DATABASE IF EXISTS $DB_DATABASE;"
    fi
}

function execSql() {
    rootpasswd="";
    if [ -z "$2" ]; then
        query=$1
        MYSQL_PWD=${rootpasswd} mysql -h 127.0.0.1 -uroot -e "$query";
    else
        DB=$1;
        query=$2;
        MYSQL_PWD=${rootpasswd} mysql -h 127.0.0.1 -uroot -D "$DB" -e "$query";
    fi
}

function backupLocalDbs() {
    # edit global client config
    #
    # vim ~/.my.cnf
    #
    # ```
    # [client]
    # user = root
    # password = secret
    # ```
    for DB in $(mysql -h 127.0.0.1 -e 'show databases' -s --skip-column-names); do
        echo "backing up $DB..."
        mysqldump $DB | gzip > "$DB.sql.gz";
    done
}

function phpini() {
    if [ -z "$1" ]; then
        iniPath=$(php -i | grep /.+/php.ini -oE)
        code $iniPath
    else
        iniPath=$(eval "php$1" -i | grep /.+/php.ini -oE)
        code $iniPath
    fi
}

function watchlog() {
    tail -f -n 100 storage/logs/laravel.log
}

function makeMp4() {
    source=$1
    target=$2
    ffmpeg -i $source -vcodec h264 -acodec mp3 $target
}

function watchdir() {
    watch -n 1 -d find .
}

function gitmovie() {
    echo "generating avatars from Gravatar..."
    perl "$DOTFILES/misc/gen-git-avatars"
    echo "starting gource..."
    gource --user-image-dir .git/avatar/ --seconds-per-day 0.1 --auto-skip-seconds 1 -1280x720 -o gource.ppm
    echo "convert into mp4..."
    ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i gource.ppm -vcodec libx264 -preset ultrafast -pix_fmt yuv420p -crf 1 -threads 0 -bf 0 gource.mp4
    echo "cleanup..."
    rm -f gource.ppm
}

kraken () {
    /Applications/GitKraken.app/Contents/MacOS/GitKraken -p "$(git rev-parse --show-toplevel)" &>/dev/null &
}

# like chrome always in light theme...
function chromeLight() {
    defaults write com.google.Chrome NSRequiresAquaSystemAppearance -bool yes
}

# ...but need to be able to experiment with darkmode in web development
function chromeAuto() {
    defaults write com.google.Chrome NSRequiresAquaSystemAppearance -bool no
}

function hosts() {
    sudo code /etc/hosts
}

function testChrome() {
    # resources
    # - https://stackoverflow.com/questions/52095416/how-can-i-correctly-provide-a-mock-webcam-video-to-chrome
    # - https://webrtc.org/testing/
    # - https://gist.github.com/DamonOehlman/7329833#gistcomment-1414202
    rm -rf $HOME/.config/chrome-test
    /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --console --no-first-run --user-data-dir=$HOME/.config/chrome-test --use-fake-device-for-media-stream --use-file-for-fake-video-capture=camfake.mjpeg --enable-logging --v=1 --vmodule="*third_party/libjingle/*=3,*=0"
}

function speedtest() {
    local defaultServer="bouygues.iperf.fr"
    local server="${1:-$defaultServer}"
    echo "running iperf3 test to server $server"
    iperf3 -c "$server" -f m -i10
}

function speedtest-server() {
    iperf3 -s -f m
}

function updateAppStore() {
    # Update App Store apps
    sudo softwareupdate -i -a
}

function shush() {
    "$@" >& /dev/null
}

function mitm() {
    sudo ettercap -T -S -i $1 -M arp:remote /$2// /$3//
}

function silent() {
   "$@" >& /dev/null
}

function kraken() {
    dir="$(cd "$(dirname "$1")" > /dev/null; pwd -P)/$(basename "$1")"
    open gitkraken://repo/$dir
}

function reloadQuickLook() {
    # xattr -r ~/Library/QuickLook
    # xattr -d -r com.apple.quarantine ~/Library/QuickLook
    qlmanage -r
    qlmanage -r cache

    for app in "Activity Monitor" "Address Book" "Calendar" "Contacts" "cfprefsd" \
        "Dock" "Finder" "Mail" "Messages" "Safari" "SizeUp" "SystemUIServer" \
        "Terminal" "Transmission" "Twitter" "iCal"; do
        killall "${app}" > /dev/null 2>&1
    done
}

function downgradePdfVersion() {
    local defaultVersion="1.5"
    local version="${3:-$defaultVersion}"

    gs -sDEVICE=pdfwrite -dCompatibilityLevel=$version -dNOPAUSE -dQUIET -dBATCH -dAutoRotatePages=/None -sOutputFile=$2 $1
}

function ocrPdf() {
    local defaultLang="deu"
    local lang="${2:-$defaultLang}"
    local output="$(basename $1 .pdf).ocr.pdf"
    echo "Identifying text in $lang"
    ocrmypdf -l $lang --redo-ocr --optimize 1 $1 $output
}

function e() {
    if test -f "composer.json"; then
        phpstorm .
    else
        code .
    fi
}

function checkAwsProfile() {
    # check if the given parameter (a certain profile) is set in the file ~/.aws/credentials if not echo an example and exit with 1
    local profile=$1
    local file=~/.aws/credentials
    local example=$(\cat << EOF
[$profile]
aws_access_key_id = <your access key>
aws_secret_access_key = <your secret key>
EOF
)

    if ! grep -q "\[$profile\]" $file; then
        # echo the following lines in red and reset afterwards
        tput setaf 1
        echo "AWS Profile $profile not found in $file"
        echo "Make sure you have a profile with the name $profile and the correct permissions in $file"
        echo ""
        echo "Example:"
        echo "$example"
        tput sgr0
        return 1
    fi

    # make shure that in the file ~/.aws/config the region is us-east-1. Otherwise the ACL requests wont work
    local file=~/.aws/config
    local example=$(\cat << EOF
[profile $profile]
region = us-east-1
EOF
)

    if ! grep -q "\[profile $profile\]" $file; then
        # echo the following lines in red and reset afterwards
        tput setaf 1
        echo "AWS Profile $profile not found in $file"
        echo "Make sure you have a profile with the name $profile and the correct permissions in $file"
        echo ""
        echo "Example:"
        echo "$example"
        tput sgr0
        return 1
    fi


    return 0
}

function createS3UserWithPolicy() {
    local username=$1
    local bucket=$2
    local profile=$3
    local argsIam=(--profile $3 --endpoint-url=https://iam.wasabisys.com)

    checkAwsProfile $profile || return 1


    # use backspace to ensure alias of cat is not used!
    local policy=$(\cat << EOF
{
  "Version": "2012-10-17",
  "Statement": [
      {
          "Sid": "AllowAllS3Actions",
          "Effect": "Allow",
          "Action": [
              "s3:*"
          ],
          "Resource": [
              "arn:aws:s3:::$bucket",
              "arn:aws:s3:::$bucket/*"
          ]
      }
  ]
}
EOF
)

    echo "Creating User $username"
    aws iam create-user $argsIam \
        --user-name $username

    echo "Creating policy to allow access to bucket $username"
    local policyArn=$(aws iam create-policy $argsIam \
        --policy-name $username \
        --policy-document ${policy} \
        --output json | jq -r .Policy.Arn)

    echo "Attaching policy $policyArn to user $username"
    aws iam attach-user-policy $argsIam \
        --user-name $username \
        --policy-arn $policyArn

    echo "Creating access key and secret for user $username and echo"
    local accessKeyResult=$(aws iam create-access-key $argsIam \
        --user-name $username \
        --output json)
    echo
    echo -n "Access Key ID: "
    ACCESS_KEY=$(echo $accessKeyResult | jq -r .AccessKey.AccessKeyId)
    echo $ACCESS_KEY

    echo -n "Access Secret: "
    ACCESS_SECRET=$(echo $accessKeyResult | jq -r .AccessKey.SecretAccessKey)
    echo $ACCESS_SECRET
}

function setupS3Bucket() {
    local name=$1
    local profile=$2
    local defaultRegion="eu-central-2"
    local region="${3:-$defaultRegion}"
    local args=(--profile $profile --endpoint-url="https://s3.${region}.wasabisys.com")

    checkAwsProfile $profile || return 1

    echo
    echo "Creating the following resources in region $region using profile $profile:"
    echo "- bucket $name"
    echo "- user $name"
    echo "- policy $name"
    echo

    if  ! continue_prompt; then
        return
    fi


    echo "Creating bucket $name in region $region"
    aws s3api create-bucket $args \
        --bucket $name

    createS3UserWithPolicy $name $name $profile

    echo
    echo "Endpoint for bucket $name is https://s3.${region}.wasabisys.com"
    echo "Open in Wasabi Console: https://console.wasabisys.com/#/file_manager/${name}?region=${region}"
    echo
    echo "Bucket $name created"
    echo
    echo "To use it in your Laravel Project, update the following environment variables in your .env file:"
    echo
    echo "S3_ACCESS_KEY_ID=$ACCESS_KEY"
    echo "S3_SECRET_ACCESS_KEY=$ACCESS_SECRET"
    echo "S3_DEFAULT_REGION=$region"
    echo "S3_BUCKET=$name"
    echo "S3_ENDPOINT=https://s3.${region}.wasabisys.com"
}

function deleteS3User() {
    local name=$1
    local profile=$2
    local argsIam=(--profile $profile --endpoint-url=https://iam.wasabisys.com)

    checkAwsProfile $profile || return 1

    echo "Detaching all policies from user $name"
    aws iam list-attached-user-policies $argsIam \
        --user-name $name \
        --output json | jq -r '.AttachedPolicies[].PolicyArn' | while read policyArn; do
        aws iam detach-user-policy $argsIam \
            --user-name $name \
            --policy-arn $policyArn
    done

    echo "Deleting all access keys for user $name"
    aws iam list-access-keys $argsIam \
        --user-name $name \
        --output json | jq -r '.AccessKeyMetadata[].AccessKeyId' | while read accessKeyId; do
        aws iam delete-access-key $argsIam \
            --user-name $name \
            --access-key-id $accessKeyId
    done

    local policyArn=$(aws iam list-policies $argsIam \
        --output json | jq -r ".Policies[] | select(.PolicyName == \"$name\") | .Arn")
    echo "Deleting policy $policyArn"
    aws iam delete-policy $argsIam \
        --policy-arn $policyArn

    echo "Deleting user $name"
    aws iam delete-user $argsIam \
        --user-name $name
}

function destroyS3Resources() {
    local name=$1
    local profile=$2
    local defaultRegion="eu-central-2"
    local region="${3:-$defaultRegion}"
    local args=(--profile $profile --endpoint-url="https://s3.${region}.wasabisys.com")

    checkAwsProfile $profile || return 1

    echo
    echo "Deleting the following resources in region $region with profile $profile:"
    echo "- bucket $name"
    echo "- user $name"
    echo "- policy $name"
    echo

    if  ! continue_prompt; then
        return
    fi
    if  ! continue_prompt; then
        return
    fi

    deleteS3User $name $profile

    echo "Deleting bucket $name"
    aws s3api delete-bucket $args \
        --bucket $name

    echo "Bucket $name destroyed"
}

function d() {
    command ./d "$@"
}

function usepint() {

    # ensure there are no working changes
    if ! git diff-index --quiet HEAD --; then
        tput setaf 1
        echo "There are working changes. Please commit or stash them first"
        tput sgr0
        return 1
    fi

    echo "Replacing php-cs-fixer with pint (can take a minute or two)..."
    git apply $DOTFILES/misc/pint.patch
    composer remove --dev --quiet friendsofphp/php-cs-fixer
    composer require --dev --quiet laravel/pint

    # ask the user if he wants to commit the changes now
    git add .
    git status -s

    if continue_prompt "Do you want to commit these changes? (y/n)"; then
        git add .
        git status -s
        git commit -m "Use pint instead of php-cs-fixer"
    fi

}

function kshark() {
    namespace=${1}

    if [ -z "$namespace" ]; then
        echo "Please provide a namespace"
        return 1
    fi
    export KUBESHARK_DISABLE_VERSION_CHECK=1
    kubectl create namespace kubeshark --dry-run=client -o yaml | kubectl label --local -f - pod-security.kubernetes.io/enforce=privileged -o yaml | kubectl apply -f -
    kubeshark tap -n $namespace --telemetry-enabled=false \
            --tls=true \
            --release-namespace=kubeshark \
            --serviceMesh=false \
            --storageLimit=2Gi \
            --set tap.noKernelModule=true \
            --set tap.ipv6=false
}

function kshark-clean() {
    kubeshark clean --release-namespace=kubeshark
}

function install-krew-packages() {
    kubectl krew install ctx
    kubectl krew install ns

    # add kubectl-netshoot plugin index
    kubectl krew index add netshoot https://github.com/nilic/kubectl-netshoot.git

    # install netshoot plugin
    kubectl krew install netshoot/netshoot
}

function restartdock() {
    killall Dock
}
